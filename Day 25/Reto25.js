/* Reto #25: Calculando distancias */
/*
  Ya ha entregado Santa Claus 游꾼 todos los regalos a los ni침os pero quieren revisar si pueden mejorar de cara al a침o que viene.
  Los elfos quieren saber cu치ntos movimientos ha hecho Santa Claus 游띵 para entregar todos los regalos. Para ello, te dan un mapa de la ciudad con la ubicaci칩n de cada ni침o y de Santa.
  El mapa es una cadena de texto multi l칤nea donde cada caracter representa una casilla. Los ni침os se representan por n칰meros del 1 al 9 y Santa Claus por la letra S. El resto de casillas son .
  Santa Claus s칩lo puede moverse hacia arriba, abajo, izquierda o derecha, y cada movimiento cuenta como 1 km. Adem치s, siempre empieza en la posici칩n S y debe entregar los regalos en orden, del 1 al 9.
*/

function travelDistance (map) {
  const positions = {}
  for (const [rowIndex, row] of map.split('\n').entries()) {
    for (const [colIndex, col] of row.replace('S', '0').split('').entries()) {
      if (/[\d|S]/.test(col)) {
        positions[col] = [rowIndex, colIndex]
      }
    }
  }
  let ans = 0
  for (const x of Object.keys(positions)) {
    if (x === '0') {
      continue
    }
    const [currentRow, currentCol] = positions[x]
    const [prevRow, prevCol] = positions[+x - 1]
    ans += Math.abs(currentRow - prevRow)
    ans += Math.abs(currentCol - prevCol)
  }
  return ans
}

function travelDistance(map) {
    const pos = {}
    let x = 0
    let distance = 0

for (let line of map.split('\n')) {
        for (let i of ["S", 1, 2, 3, 4, 5, 6, 7, 8, 9]) {
            line.includes(i) ? pos[i] = [x, line.indexOf(i)] : null
        }
        x++
    }

    pos[0] = pos["S"]

    for(let i = 0; i < Object.keys(pos).length - 2; i++) {
        distance += Math.abs(pos[i][0] - pos[i+1][0]) + 
            Math.abs(pos[i][1] - pos[i+1][1])
    }

    return distance
}



function travelDistance(map) {
  const roadmapArr = map.split('\n')
  const roadmap = roadmapArr.join('')
  const cols = roadmapArr[0].length
  const santaPos = roadmap.indexOf('S')

  let gift = 1
  let distance = 0
  let santaCol = santaPos % cols
  let santaRow = (santaPos / cols) | 0

  const numbers = roadmap.match(/\d/g)

  const rowValues = [0, 0]
  const colValues = [0, 0]

  for (const _number of numbers) {
    const giftPos = roadmap.indexOf(`${gift}`)
    const giftCol = giftPos % cols
    const giftRow = (giftPos / cols) | 0

    const row = santaRow - giftRow
    const col = santaCol - giftCol

    rowValues[0] = row
    rowValues[1] = -row
    colValues[0] = col
    colValues[1] = -col

    distance += rowValues[+(row < 0)] + colValues[+(col < 0)]

    santaCol = giftCol
    santaRow = giftRow

    gift++
  }

  return distance
}

//---------------------------------------

const map = `.....1....
..S.......
..........
....3.....
......2...`

const result = travelDistance(map)
console.log(result) // -> 12 km
/*
De la S al ni침o 1: 4 movimientos
Del ni침o 1 al 2: 5 movimientos
Del ni침o 2 al 3: 3 movimientos
Total: 12 movimientos
*/

const result2 = travelDistance(`..S.1...`)
console.log(result2) // -> 2

/*
  Escribe una funci칩n travelDistance que reciba un mapa y devuelva la distancia total que ha recorrido Santa Claus seg칰n la posici칩n de los ni침os.
  Ten en cuenta que:
  El mapa no tiene por qu칠 ser cuadrado.
  El mapa siempre tendr치 al menos un ni침o.
  El mapa siempre tendr치 una posici칩n inicial para Santa Claus.
  Los n칰meros de los ni침os nunca se repiten.
*/